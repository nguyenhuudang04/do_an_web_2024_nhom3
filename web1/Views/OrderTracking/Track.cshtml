@model web1.Models.Order

@{
    ViewData["Title"] = $"Track Order #{Model.Id}";
    var currentStatus = Model.StatusHistory.OrderByDescending(s => s.Timestamp).FirstOrDefault();
}

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Track Your Order #@Model.Id</h4>
                </div>
                <div class="card-body">
                    <!-- Current Status Alert -->
                    <div class="alert @GetAlertClass(Model.CurrentStatus)">
                        <div class="d-flex align-items-center">
                            <i class="@GetStatusIcon(Model.CurrentStatus) me-2 fs-4"></i>
                            <div>
                                <h5 class="mb-1">Current Status: @Model.CurrentStatus</h5>
                                @if (currentStatus != null)
                                {
                                    <p class="mb-0">
                                        <strong>Location:</strong> @currentStatus.Location<br>
                                        <small>Last updated: @currentStatus.Timestamp.ToString("MMM dd, yyyy HH:mm")</small>
                                    </p>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Progress Bar -->
                    <div class="progress mb-4" style="height: 5px;">
                        <div class="progress-bar bg-success" role="progressbar" 
                             style="width: @GetProgressPercentage(Model.CurrentStatus)%">
                        </div>
                    </div>

                    <!-- Status Steps -->
                    <div class="status-steps d-flex justify-content-between mb-4">
                        @foreach (var status in new[] { "Pending", "Processing", "Warehouse", "Transit", "LocalHub", "OutForDelivery", "Delivered" })
                        {
                            var isCompleted = IsStatusCompleted(Model.CurrentStatus, status);
                            var isCurrent = Model.CurrentStatus == status;
                            <div class="status-step text-center">
                                <div class="step-icon @(isCompleted ? "completed" : "") @(isCurrent ? "current" : "")">
                                    <i class="@GetStatusIcon(status)"></i>
                                </div>
                                <div class="step-label @(isCurrent ? "text-primary fw-bold" : "")">
                                    @status
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Timeline History -->
                    <h5 class="mb-3">Delivery Updates</h5>
                    <div class="timeline">
                        @foreach (var status in Model.StatusHistory.OrderByDescending(s => s.Timestamp))
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker @GetStatusClass(status.Status)"></div>
                                <div class="timeline-content">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">@status.Status</h6>
                                        <small class="text-muted">
                                            @status.Timestamp.ToString("MMM dd, yyyy HH:mm")
                                        </small>
                                    </div>
                                    <p class="mb-1"><strong>Location:</strong> @status.Location</p>
                                    @if (!string.IsNullOrEmpty(status.Description))
                                    {
                                        <p class="mb-0 text-muted">@status.Description</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Order Date</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToString("MMM dd, yyyy")</dd>

                        <dt class="col-sm-4">Customer</dt>
                        <dd class="col-sm-8">@Model.FullName</dd>

                        <dt class="col-sm-4">Phone</dt>
                        <dd class="col-sm-8">@Model.PhoneNumber</dd>

                        <dt class="col-sm-4">Address</dt>
                        <dd class="col-sm-8">@Model.Address</dd>

                        <dt class="col-sm-4">Total</dt>
                        <dd class="col-sm-8">$@Model.TotalAmount.ToString("N2")</dd>
                    </dl>

                    <hr>

                    <h6 class="mb-3">Order Items</h6>
                    <div class="order-items">
                        @foreach (var item in Model.OrderDetails)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <span class="fw-bold">@item.Product.Name</span>
                                    <small class="text-muted d-block">Quantity: @item.Quantity</small>
                                </div>
                                <span>$@((item.Price * item.Quantity).ToString("N2"))</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Timeline Styles */
        .timeline {
            position: relative;
            padding: 20px 0;
        }

        .timeline::before {
            content: '';
            position: absolute;
            top: 0;
            left: 15px;
            height: 100%;
            width: 2px;
            background: #e9ecef;
        }

        .timeline-item {
            position: relative;
            padding-left: 40px;
            margin-bottom: 30px;
        }

        .timeline-marker {
            position: absolute;
            left: 0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #fff;
            border: 2px solid #6c757d;
            margin-left: 1px;
        }

        /* Status Steps Styles */
        .status-steps {
            position: relative;
            padding: 0 20px;
        }

        .status-step {
            flex: 1;
            position: relative;
            padding: 0 10px;
        }

        .step-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #f8f9fa;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
        }

        .step-icon.completed {
            background: #198754;
            border-color: #198754;
            color: white;
        }

        .step-icon.current {
            background: #0d6efd;
            border-color: #0d6efd;
            color: white;
            animation: pulse 2s infinite;
        }

        .step-label {
            font-size: 0.8rem;
            color: #6c757d;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(13, 110, 253, 0.4);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(13, 110, 253, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(13, 110, 253, 0);
            }
        }
    </style>
}

@functions {
    string GetStatusClass(string status) => status.ToLower() switch
    {
        "pending" => "pending",
        "processing" => "processing",
        "warehouse" => "warehouse",
        "transit" => "transit",
        "localhub" => "localhub",
        "outfordelivery" => "delivery",
        "delivered" => "delivered",
        _ => ""
    };

    string GetAlertClass(string status) => status.ToLower() switch
    {
        "pending" => "alert-warning",
        "processing" => "alert-info",
        "warehouse" => "alert-primary",
        "transit" => "alert-secondary",
        "localhub" => "alert-info",
        "outfordelivery" => "alert-primary",
        "delivered" => "alert-success",
        _ => "alert-secondary"
    };

    string GetStatusIcon(string status) => status.ToLower() switch
    {
        "pending" => "bi bi-hourglass",
        "processing" => "bi bi-gear",
        "warehouse" => "bi bi-box",
        "transit" => "bi bi-truck",
        "localhub" => "bi bi-building",
        "outfordelivery" => "bi bi-bicycle",
        "delivered" => "bi bi-check-circle",
        _ => "bi bi-question-circle"
    };

    int GetProgressPercentage(string currentStatus) => currentStatus.ToLower() switch
    {
        "pending" => 14,
        "processing" => 28,
        "warehouse" => 42,
        "transit" => 56,
        "localhub" => 70,
        "outfordelivery" => 84,
        "delivered" => 100,
        _ => 0
    };

    bool IsStatusCompleted(string currentStatus, string status)
    {
        var statusOrder = new Dictionary<string, int>
        {
            {"Pending", 1},
            {"Processing", 2},
            {"Warehouse", 3},
            {"Transit", 4},
            {"LocalHub", 5},
            {"OutForDelivery", 6},
            {"Delivered", 7}
        };

        return statusOrder.TryGetValue(currentStatus, out int currentOrder) &&
               statusOrder.TryGetValue(status, out int checkOrder) &&
               currentOrder >= checkOrder;
    }
} 